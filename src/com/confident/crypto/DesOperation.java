package com.confident.crypto;

import javacard.framework.JCSystem;

/**
 * This class provide sub function of DES algorithm
 * 
 * @author catur.nugroho@myconfident.com
 *
 * @version 2016.02.27
 * @since 1.7
 */

public class DesOperation {
	private static final byte bytes = 4;
	private static final byte[] F = new byte[1];
    private static byte[] temp1 = new byte[bytes];
	private static byte[] temp2 = new byte[bytes];
	private static byte[] temp3 = new byte[bytes];
	private static byte[] temp4 = new byte[bytes];
	private static byte[] temp5 = new byte[bytes];
	private static byte[] temp6 = new byte[bytes];
	private static byte[] temp7 = new byte[bytes];
	private static byte[] temp8 = new byte[bytes];
	private static byte[] LHs = null;
	private static byte[] RHs = null;
	private static byte[] SB1 = null;
	private static byte[] SB2 = null;
	private static byte[] SB3 = null;
	private static byte[] SB4 = null;
	private static byte[] SB5 = null;
	private static byte[] SB6 = null;
	private static byte[] SB7 = null;
	private static byte[] SB8 = null;
	
	public static byte round(byte[] X, byte[] Y, byte[] T, byte[] SK, byte p, byte bytes) {
		F[0] = 0x3F;
		BitOperation.getValue(SK, temp1, p++);
		BitOperation.xor(temp1, X, T);

		BitOperation.shrs(T, temp1, (byte) 8, bytes);
		BitOperation.shrs(T, temp2, (byte) 16, bytes);
		BitOperation.shrs(T, temp3, (byte) 24, bytes);
		BitOperation.and(T, F, temp5);
		BitOperation.and(temp1, F, temp6);
		BitOperation.and(temp2, F, temp7);
		BitOperation.and(temp3, F, temp8);
		BitOperation.getValue(SB8, temp1, temp5[3]);
		BitOperation.getValue(SB6, temp2, temp6[3]);
		BitOperation.getValue(SB4, temp3, temp7[3]);
		BitOperation.getValue(SB2, temp4, temp8[3]);
		BitOperation.xor(Y, temp1, temp5);
		BitOperation.xor(temp5, temp2, temp6);
		BitOperation.xor(temp6, temp3, temp5);
		BitOperation.xor(temp5, temp4, Y);

		BitOperation.getValue(SK, temp1, p++);
		BitOperation.shls(X, temp2, (byte) 28, bytes);
		BitOperation.shrs(X, temp3, (byte) 4, bytes);
		BitOperation.or(temp2, temp3, temp4);
		BitOperation.xor(temp1, temp4, T);

		BitOperation.shrs(T, temp1, (byte) 8, bytes);
		BitOperation.shrs(T, temp2, (byte) 16, bytes);
		BitOperation.shrs(T, temp3, (byte) 24, bytes);
		BitOperation.and(T, F, temp5);
		BitOperation.and(temp1, F, temp6);
		BitOperation.and(temp2, F, temp7);
		BitOperation.and(temp3, F, temp8);
		BitOperation.getValue(SB7, temp1, temp5[3]);
		BitOperation.getValue(SB5, temp2, temp6[3]);
		BitOperation.getValue(SB3, temp3, temp7[3]);
		BitOperation.getValue(SB1, temp4, temp8[3]);
		BitOperation.xor(Y, temp1, temp5);
		BitOperation.xor(temp5, temp2, temp6);
		BitOperation.xor(temp6, temp3, temp5);
		BitOperation.xor(temp5, temp4, Y);
		return p;
	}
	
	/**
	 * Permuted Choice 1
	 * @param X
	 * @param Y
	 * @param T
	 * @param bytes
	 */
	public static void permutedChoice1(byte[] X, byte[] Y, byte[] T, byte bytes) {
		BitOperation.shrs(Y, temp1, (byte) 4, bytes);
		BitOperation.xor(temp1, X, temp2);
		BitOperation.fill(temp1, (byte) 0x0F);
		BitOperation.and(temp2, temp1, T);
		
		BitOperation.arrayCopy(X, temp1);
		BitOperation.xor(temp1, T, X);
		
		BitOperation.arrayCopy(Y, temp1);
		BitOperation.shls(T, temp2, (byte) 4, bytes);
		BitOperation.xor(temp1, temp2, Y);
		
		BitOperation.xor(Y, X, temp1);
		BitOperation.fill(temp2, (byte) 0x10);
		BitOperation.and(temp1, temp2, T);

		BitOperation.arrayCopy(X, temp1);
		BitOperation.xor(temp1, T, X);

		BitOperation.arrayCopy(Y, temp1);
		BitOperation.xor(temp1, T, Y);
		
		assignX(X, T, bytes);
		assignY(Y, T, bytes);
	}
	
	private static void assignX(byte[] X, byte[] T, byte bytes) {
		F[0] = 0x0F;
		
		BitOperation.and(X, F, temp1);
		BitOperation.getValue(LHs, temp2, temp1[3]);
		BitOperation.shls(temp2, temp3, (byte) 3, bytes);

		BitOperation.shrs(X, temp1, (byte) 8, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(LHs, temp1, temp2[3]);
		BitOperation.shls(temp1, temp2, (byte) 2, bytes);
		
		BitOperation.or(temp3, temp2, temp4);
		
		BitOperation.shrs(X, temp1, (byte) 16, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(LHs, temp1, temp2[3]);
		BitOperation.shls(temp1, temp2, (byte) 1, bytes);

		BitOperation.or(temp4, temp2, temp3);

		BitOperation.shrs(X, temp1, (byte) 24, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(LHs, temp1, temp2[3]);

		BitOperation.or(temp3, temp1, temp4);

		BitOperation.shrs(X, temp1, (byte) 5, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(LHs, temp1, temp2[3]);
		BitOperation.shls(temp1, temp2, (byte) 7, bytes);
		
		BitOperation.or(temp4, temp2, temp3);

		BitOperation.shrs(X, temp1, (byte) 13, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(LHs, temp1, temp2[3]);
		BitOperation.shls(temp1, temp2, (byte) 6, bytes);
		
		BitOperation.or(temp3, temp2, temp4);

		BitOperation.shrs(X, temp1, (byte) 21, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(LHs, temp1, temp2[3]);
		BitOperation.shls(temp1, temp2, (byte) 5, bytes);
		
		BitOperation.or(temp4, temp2, temp3);

		BitOperation.shrs(X, temp1, (byte) 29, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(LHs, temp1, temp2[3]);
		BitOperation.shls(temp1, temp2, (byte) 4, bytes);
		
		BitOperation.or(temp3, temp2, temp1);
		
		BitOperation.fill(temp2, (byte) 0xFF); temp2[0] = 0x0F;
		BitOperation.and(temp1, temp2, X);
	}
	
	private static void assignY(byte[] X, byte[] T, byte bytes) {
		F[0] = 0x0F;
		
		BitOperation.shrs(X, temp1, (byte) 1, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(RHs, temp1, temp2[3]);
		BitOperation.shls(temp1, temp3, (byte) 3, bytes);

		BitOperation.shrs(X, temp1, (byte) 9, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(RHs, temp1, temp2[3]);
		BitOperation.shls(temp1, temp2, (byte) 2, bytes);
		
		BitOperation.or(temp3, temp2, temp4);
		
		BitOperation.shrs(X, temp1, (byte) 17, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(RHs, temp1, temp2[3]);
		BitOperation.shls(temp1, temp2, (byte) 1, bytes);

		BitOperation.or(temp4, temp2, temp3);

		BitOperation.shrs(X, temp1, (byte) 25, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(RHs, temp1, temp2[3]);

		BitOperation.or(temp3, temp1, temp4);

		BitOperation.shrs(X, temp1, (byte) 4, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(RHs, temp1, temp2[3]);
		BitOperation.shls(temp1, temp2, (byte) 7, bytes);
		
		BitOperation.or(temp4, temp2, temp3);

		BitOperation.shrs(X, temp1, (byte) 12, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(RHs, temp1, temp2[3]);
		BitOperation.shls(temp1, temp2, (byte) 6, bytes);
		
		BitOperation.or(temp3, temp2, temp4);

		BitOperation.shrs(X, temp1, (byte) 20, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(RHs, temp1, temp2[3]);
		BitOperation.shls(temp1, temp2, (byte) 5, bytes);
		
		BitOperation.or(temp4, temp2, temp3);

		BitOperation.shrs(X, temp1, (byte) 28, bytes);
		BitOperation.and(temp1, F, temp2);
		BitOperation.getValue(RHs, temp1, temp2[3]);
		BitOperation.shls(temp1, temp2, (byte) 4, bytes);
		
		BitOperation.or(temp3, temp2, temp1);
		
		BitOperation.fill(temp2, (byte) 0xFF); temp2[0] = 0x0F;
		BitOperation.and(temp1, temp2, X);
	}
	
	/**
	 * Calculate subkeys
	 * @param X
	 * @param T
	 * @param bytes
	 */
	public static void calculateSubkeys(byte[] X, byte[] Y, byte[] SK, byte bytes) {
		short ptr = 0;
	    for(byte i = 0; i < 16; i++) {
	        if( i < 2 || i == 8 || i == 15 ) {
	        	BitOperation.shls(X, temp1, (byte) 1, bytes);
	        	BitOperation.shrs(X, temp2, (byte) 27, bytes);
	        	BitOperation.or(temp1, temp2, temp3);
	    		BitOperation.fill(temp1, (byte) 0xFF); temp1[0] = 0x0F;
	    		BitOperation.and(temp3, temp1, X);
	    		
	        	BitOperation.shls(Y, temp1, (byte) 1, bytes);
	        	BitOperation.shrs(Y, temp2, (byte) 27, bytes);
	        	BitOperation.or(temp1, temp2, temp3);
	    		BitOperation.fill(temp1, (byte) 0xFF); temp1[0] = 0x0F;
	    		BitOperation.and(temp3, temp1, Y);
	        } else {
	        	BitOperation.shls(X, temp1, (byte) 2, bytes);
	        	BitOperation.shrs(X, temp2, (byte) 26, bytes);
	        	BitOperation.or(temp1, temp2, temp3);
	    		BitOperation.fill(temp1, (byte) 0xFF); temp1[0] = 0x0F;
	    		BitOperation.and(temp3, temp1, X);
	    		
	        	BitOperation.shls(Y, temp1, (byte) 2, bytes);
	        	BitOperation.shrs(Y, temp2, (byte) 26, bytes);
	        	BitOperation.or(temp1, temp2, temp3);
	    		BitOperation.fill(temp1, (byte) 0xFF); temp1[0] = 0x0F;
	    		BitOperation.and(temp3, temp1, Y);
	        }
			
	        ptr = assignSK(X, Y, SK, ptr, bytes);
	    }
	}
	
	private static short assignSK(byte[] X, byte[] Y, byte[] SK, short ptr, byte bytes) {
        BitOperation.shls(X, temp1, (byte) 4, bytes);
        BitOperation.fill(temp2, (byte) 0); temp2[0] = 0x24;
        BitOperation.and(temp1, temp2, temp3);

        BitOperation.shls(X, temp1, (byte) 28, bytes);
        temp2[0] = 0x10;
        BitOperation.and(temp1, temp2, temp4);
        
        BitOperation.or(temp3, temp4, temp5);
        
        BitOperation.shls(X, temp1, (byte) 14, bytes);
        temp2[0] = 0x08;
        BitOperation.and(temp1, temp2, temp3);

        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shls(X, temp1, (byte) 18, bytes);
        temp2[0] = 0x02; temp2[1] = 0x08;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shls(X, temp1, (byte) 6, bytes);
        temp2[0] = 0x01; temp2[1] = 0x00;
        BitOperation.and(temp1, temp2, temp3);

        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shls(X, temp1, (byte) 9, bytes);
        temp2[0] = 0x00; temp2[1] = 0x20;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shrs(X, temp1, (byte) 1, bytes);
        temp2[1] = 0x10;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shls(X, temp1, (byte) 10, bytes);
        temp2[1] = 0x04;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shls(X, temp1, (byte) 2, bytes);
        temp2[1] = 0x02;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shrs(X, temp1, (byte) 10, bytes);
        temp2[1] = 0x01;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shrs(Y, temp1, (byte) 13, bytes);
        temp2[1] = 0x00; temp2[2] = 0x20;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shrs(Y, temp1, (byte) 4, bytes);
        temp2[2] = 0x10;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shls(Y, temp1, (byte) 6, bytes);
        temp2[2] = 0x08;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shrs(Y, temp1, (byte) 1, bytes);
        temp2[2] = 0x04;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shrs(Y, temp1, (byte) 14, bytes);
        temp2[2] = 0x02;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        temp2[2] = 0x01;
        BitOperation.and(Y, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shrs(Y, temp1, (byte) 5, bytes);
        temp2[2] = 0x00; temp2[3] = 0x20;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shrs(Y, temp1, (byte) 10, bytes);
        temp2[3] = 0x10;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shrs(Y, temp1, (byte) 3, bytes);
        temp2[3] = 0x08;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shrs(Y, temp1, (byte) 18, bytes);
        temp2[3] = 0x04;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shrs(Y, temp1, (byte) 26, bytes);
        temp2[3] = 0x02;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shrs(Y, temp1, (byte) 24, bytes);
        temp2[3] = 0x01;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
		BitOperation.setValue(SK, temp5, (byte) ptr++);
		
//=========================================================================
        BitOperation.shls(X, temp1, (byte) 15, bytes);
        BitOperation.fill(temp2, (byte) 0); temp2[0] = 0x20;
        BitOperation.and(temp1, temp2, temp3);

        BitOperation.shls(X, temp1, (byte) 17, bytes);
        temp2[0] = 0x10;
        BitOperation.and(temp1, temp2, temp4);
        
        BitOperation.or(temp3, temp4, temp5);
        
        BitOperation.shls(X, temp1, (byte) 10, bytes);
        temp2[0] = 0x08;
        BitOperation.and(temp1, temp2, temp3);

        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shls(X, temp1, (byte) 22, bytes);
        temp2[0] = 0x04;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shrs(X, temp1, (byte) 2, bytes);
        temp2[0] = 0x02;
        BitOperation.and(temp1, temp2, temp3);

        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shls(X, temp1, (byte) 1, bytes);
        temp2[0] = 0x01;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shls(X, temp1, (byte) 16, bytes);
        temp2[0] = 0x00; temp2[1] = 0x20;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shls(X, temp1, (byte) 11, bytes);
        temp2[1] = 0x10;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shls(X, temp1, (byte) 3, bytes);
        temp2[1] = 0x08;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shrs(X, temp1, (byte) 6, bytes);
        temp2[1] = 0x04;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shls(X, temp1, (byte) 15, bytes);
        temp2[1] = 0x02;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shrs(X, temp1, (byte) 4, bytes);
        temp2[1] = 0x01;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shrs(Y, temp1, (byte) 2, bytes);
        temp2[1] = 0x00; temp2[2] = 0x20;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shls(Y, temp1, (byte) 8, bytes);
        temp2[2] = 0x10;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shrs(Y, temp1, (byte) 14, bytes);
        temp2[2] = 0x08; temp2[3] = 0x08;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shrs(Y, temp1, (byte) 9, bytes);
        temp2[2] = 0x04; temp2[3] = 0x00;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        temp2[2] = 0x02;
        BitOperation.and(Y, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shls(Y, temp1, (byte) 7, bytes);
        temp2[2] = 0x01;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shrs(Y, temp1, (byte) 7, bytes);
        temp2[2] = 0x00; temp2[3] = 0x20;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shrs(Y, temp1, (byte) 3, bytes);
        temp2[3] = 0x11;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
        
        BitOperation.shls(Y, temp1, (byte) 2, bytes);
        temp2[3] = 0x04;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp5, temp3, temp4);
        
        BitOperation.shrs(Y, temp1, (byte) 21, bytes);
        temp2[3] = 0x02;
        BitOperation.and(temp1, temp2, temp3);
        
        BitOperation.or(temp4, temp3, temp5);
		BitOperation.setValue(SK, temp5, (byte) ptr++);
		return ptr;
	}
	
	public static void initialize() {
		if (LHs != null) {
			return;
		}
		LHs = getLHs();
		RHs = getRHs();
		SB1 = getSB1();
		SB2 = getSB2();
		SB3 = getSB3();
		SB4 = getSB4();
		SB5 = getSB5();
		SB6 = getSB6();
		SB7 = getSB7();
		SB8 = getSB8();
	}
	
	public static void clear() {
		try {
			JCSystem.beginTransaction();
			byte[] temp1 = LHs;
			byte[] temp2 = RHs;
			byte[] temp3 = SB1;
			byte[] temp4 = SB2;
			byte[] temp5 = SB3;
			byte[] temp6 = SB4;
			byte[] temp7 = SB5;
			byte[] temp8 = SB6;
			byte[] temp9 = SB7;
			byte[] temp10 = SB8;
			LHs = null;
			RHs = null;
			SB1 = null;
			SB2 = null;
			SB3 = null;
			SB4 = null;
			SB5 = null;
			SB6 = null;
			SB7 = null;
			SB8 = null;
			JCSystem.requestObjectDeletion();
			JCSystem.commitTransaction();
		} catch (Exception e) {
			JCSystem.abortTransaction();
		}
	}

	private static byte[] getLHs() {
		byte[] LHs = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01,
				0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x00,
				0x01, 0x01, 0x01, 0x01 };
		return LHs;
	}

	private static byte[] getRHs() {
		byte[] RHs = { 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00,
				0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01,
				0x01, 0x01, 0x01, 0x01 };
		return RHs;
	}
	
	/**
	 * Initial Permutation macro
	 * 
	 * @param X
	 * @param Y
	 * @param T
	 * @param bytes
	 */
	public static void initialPermutation(byte[] X, byte[] Y, byte[] T, byte bytes) {
		BitOperation.shrs(X, temp1, (byte) 4, bytes);
		BitOperation.xor(temp1, Y, temp2);
		BitOperation.fill(temp3, (byte) 0x0F);
		BitOperation.and(temp2, temp3, T);
		
		BitOperation.arrayCopy(Y, temp1);
		BitOperation.xor(temp1, T, Y);
		
		BitOperation.arrayCopy(X, temp1);
		BitOperation.shls(T, temp2, (byte) 4, bytes);
		BitOperation.xor(temp1, temp2, X);
		
		BitOperation.shrs(X, temp1, (byte) 16, bytes);
		BitOperation.xor(temp1, Y, T);
		BitOperation.fill(T, (byte) 0, (short) 2);

		BitOperation.arrayCopy(Y, temp1);
		BitOperation.xor(temp1, T, Y);
		
		BitOperation.arrayCopy(X, temp1);
		BitOperation.shls(T, temp2, (byte) 16, bytes);
		BitOperation.xor(temp1, temp2, X);
		
		BitOperation.shrs(Y, temp1, (byte) 2, bytes);
		BitOperation.xor(temp1, X, temp2);
		BitOperation.fill(temp3, (byte) 0x33);
		BitOperation.and(temp2, temp3, T);
		
		BitOperation.arrayCopy(X, temp1);
		BitOperation.xor(temp1, T, X);

		BitOperation.arrayCopy(Y, temp1);
		BitOperation.shls(T, temp2, (byte) 2, bytes);
		BitOperation.xor(temp1, temp2, Y);
		
		BitOperation.shrs(Y, temp1, (byte) 8, bytes);
		BitOperation.xor(temp1, X, temp2);
		BitOperation.fill(temp3, (byte) 0);
		temp3[1] = (byte) 0xFF; temp3[3] = (byte) 0xFF;
		BitOperation.and(temp2, temp3, T);
		
		BitOperation.arrayCopy(X, temp1);
		BitOperation.xor(temp1, T, X);

		BitOperation.arrayCopy(Y, temp1);
		BitOperation.shls(T, temp2, (byte) 8, bytes);
		BitOperation.xor(temp1, temp2, Y);

		BitOperation.shls(Y, temp1, (byte) 1, bytes);
		BitOperation.shrs(Y, temp2, (byte) 31, bytes);
		BitOperation.or(temp1, temp2, Y);
		
		BitOperation.xor(X, Y, temp1);
		BitOperation.fill(temp2, (byte) 0xAA);
		BitOperation.and(temp1, temp2, T);
		
		BitOperation.arrayCopy(Y, temp1);
		BitOperation.xor(temp1, T, Y);
		
		BitOperation.arrayCopy(X, temp1);
		BitOperation.xor(temp1, T, X);
		
		BitOperation.shls(X, temp1, (byte) 1, bytes);
		BitOperation.shrs(X, temp2, (byte) 31, bytes);
		BitOperation.or(temp1, temp2, X);
	}

	/**
	 * Final Permutation macro
	 * 
	 * @param X
	 * @param Y
	 * @param T
	 * @param bytes
	 */
	public static void finalPermutation(byte[] X, byte[] Y, byte[] T, byte bytes) {
		BitOperation.shls(X, temp1, (byte) 31, bytes);
		BitOperation.shrs(X, temp2, (byte) 1, bytes);
		BitOperation.or(temp1, temp2, X);

		BitOperation.xor(X, Y, temp1);
		BitOperation.fill(temp2, (byte) 0xAA);
		BitOperation.and(temp1, temp2, T);
		
		BitOperation.arrayCopy(X, temp1);
		BitOperation.xor(temp1, T, X);

		BitOperation.arrayCopy(Y, temp1);
		BitOperation.xor(temp1, T, Y);
		
		BitOperation.shls(Y, temp1, (byte) 31, bytes);
		BitOperation.shrs(Y, temp2, (byte) 1, bytes);
		BitOperation.or(temp1, temp2, Y);
		
		BitOperation.shrs(Y, temp1, (byte) 8, bytes);
		BitOperation.xor(temp1, X, temp2);
		BitOperation.fill(temp3, (byte) 0);
		temp3[1] = (byte) 0xFF; temp3[3] = (byte) 0xFF;
		BitOperation.and(temp2, temp3, T);

		BitOperation.arrayCopy(X, temp1);
		BitOperation.xor(temp1, T, X);

		BitOperation.arrayCopy(Y, temp1);
		BitOperation.shls(T, temp2, (byte) 8, bytes);
		BitOperation.xor(temp1, temp2, Y);
		
		BitOperation.shrs(Y, temp1, (byte) 2, bytes);
		BitOperation.xor(temp1, X, temp2);
		BitOperation.fill(temp3, (byte) 0x33);
		BitOperation.and(temp2, temp3, T);

		BitOperation.arrayCopy(X, temp1);
		BitOperation.xor(temp1, T, X);
		
		BitOperation.arrayCopy(Y, temp1);
		BitOperation.shls(T, temp2, (byte) 2, bytes);
		BitOperation.xor(temp1, temp2, Y);
		
		BitOperation.shrs(X, temp1, (byte) 16, bytes);
		BitOperation.xor(temp1, Y, T);
		BitOperation.fill(T, (byte) 0, (short) 2);
		
		BitOperation.arrayCopy(Y, temp1);
		BitOperation.xor(temp1, T, Y);
		
		BitOperation.arrayCopy(X, temp1);
		BitOperation.shls(T, temp2, (byte) 16, bytes);
		BitOperation.xor(temp1, temp2, X);
		
		BitOperation.shrs(X, temp1, (byte) 4, bytes);
		BitOperation.xor(temp1, Y, temp2);
		BitOperation.fill(temp3, (byte) 0x0F);
		BitOperation.and(temp2, temp3, T);
		
		BitOperation.arrayCopy(Y, temp1);
		BitOperation.xor(temp1, T, Y);
		
		BitOperation.arrayCopy(X, temp1);
		BitOperation.shls(T, temp2, (byte) 4, bytes);
		BitOperation.xor(temp1, temp2, X);
	}
	
	/**
	 * Get X and Y 
	 * @param input
	 * @param xy
	 * @param bytes
	 * @param XY
	 */
	public static void getXY(byte[] input, byte[] xy, byte bytes, byte i) {
		F[0] = input[i + 0];
		BitOperation.shls(F, temp1, (byte) 24, bytes);
		
		F[0] = input[i + 1];
		BitOperation.shls(F, temp2, (byte) 16, bytes);
		
		F[0] = input[i + 2];
		BitOperation.shls(F, temp3, (byte) 8, bytes);
		BitOperation.or(temp1, temp2, temp4);
		BitOperation.or(temp4, temp3, temp5);
		F[0] = input[i + 3];
		BitOperation.or(temp5, F, xy);
	}

	/**
	 * Put X and Y 
	 * @param output
	 * @param xy
	 * @param bytes
	 * @param XY
	 */
	public static void putXY(byte[] output, byte[] xy, byte bytes, byte i) {
		BitOperation.shrs(xy, temp1, (byte) 24, bytes);
		BitOperation.shrs(xy, temp2, (byte) 16, bytes);
		BitOperation.shrs(xy, temp3, (byte) 8, bytes);
		BitOperation.setValue(output, temp1, i);
		BitOperation.setValue(output, temp2, (byte) (i + 1));
		BitOperation.setValue(output, temp3, (byte) (i + 2));
		BitOperation.setValue(output, xy, (byte) (i + 3));
	}
	
	private static byte[] getSB1() {
		byte[] SB1 = { 0x01, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x04, 0x04, 0x01, 0x01, 0x00, 0x04, 0x00, 0x01, 0x04, 0x04,
				0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x01, 0x04, 0x00, 0x01, 0x01, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x04, 0x01, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x01, 0x04, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x04, 0x04,
				0x00, 0x01, 0x00, 0x04, 0x01, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x01, 0x04, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
				0x01, 0x01, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00,
				0x00, 0x01, 0x04, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x04, 0x04, 0x00, 0x01, 0x04, 0x04, 0x01, 0x01, 0x04, 0x04, 0x00, 0x01, 0x00, 0x04, 0x01, 0x01, 0x00, 0x00,
				0x01, 0x00, 0x04, 0x04, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x01, 0x04, 0x04, 0x01, 0x01, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x00, 0x04, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x04 };
		return SB1;
	}

	private static byte[] getSB2() {
		byte[] SB2 = { (byte) 0x80, 0x10, (byte) 0x80, 0x20, (byte) 0x80, 0x00, (byte) 0x80, 0x00, 0x00, 0x00, (byte) 0x80, 0x00, 0x00, 0x10, (byte) 0x80, 0x20, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
				(byte) 0x80, 0x10, 0x00, 0x20, (byte) 0x80, 0x00, (byte) 0x80, 0x20, (byte) 0x80, 0x00, 0x00, 0x20, (byte) 0x80, 0x10, (byte) 0x80, 0x20, (byte) 0x80, 0x10, (byte) 0x80, 0x00, (byte) 0x80, 0x00, 0x00, 0x00, (byte) 0x80, 0x00, (byte) 0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
				(byte) 0x80, 0x10, 0x00, 0x20, 0x00, 0x10, (byte) 0x80, 0x00, 0x00, 0x10, 0x00, 0x20, (byte) 0x80, 0x00, (byte) 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, (byte) 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x80, 0x00, 0x00, 0x10, (byte) 0x80, 0x20, (byte) 0x80, 0x10, 0x00, 0x00,
				0x00, 0x10, 0x00, 0x20, (byte) 0x80, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, (byte) 0x80, 0x00, 0x00, 0x00, (byte) 0x80, 0x20, (byte) 0x80, 0x10, (byte) 0x80, 0x00, (byte) 0x80, 0x10, 0x00, 0x00, 0x00, 0x00, (byte) 0x80, 0x20, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x10, (byte) 0x80, 0x20, (byte) 0x80, 0x10, 0x00, 0x20, 0x00, 0x10, 0x00, 0x00, (byte) 0x80, 0x00, (byte) 0x80, 0x20, (byte) 0x80, 0x10, 0x00, 0x00, (byte) 0x80, 0x10, (byte) 0x80, 0x00, 0x00, 0x00, (byte) 0x80, 0x00, (byte) 0x80, 0x10, 0x00, 0x00, (byte) 0x80, 0x00, (byte) 0x80, 0x00,
				0x00, 0x00, 0x00, 0x20, (byte) 0x80, 0x10, (byte) 0x80, 0x20, 0x00, 0x10, (byte) 0x80, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, (byte) 0x80, 0x00, (byte) 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x80, 0x20, (byte) 0x80, 0x10, (byte) 0x80, 0x00, 0x00, 0x10, 0x00, 0x00,
				(byte) 0x80, 0x00, 0x00, 0x20, 0x00, 0x10, 0x00, 0x20, (byte) 0x80, 0x00, (byte) 0x80, 0x20, (byte) 0x80, 0x00, 0x00, 0x20, 0x00, 0x10, 0x00, 0x20, 0x00, 0x10, (byte) 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x80, 0x00, (byte) 0x80, 0x00, 0x00, 0x00, (byte) 0x80, 0x20,
				(byte) 0x80, 0x00, 0x00, 0x00, (byte) 0x80, 0x10, 0x00, 0x20, (byte) 0x80, 0x10, (byte) 0x80, 0x20, 0x00, 0x10, (byte) 0x80, 0x00 };
		return SB2;
	}

	private static byte[] getSB3() {
		byte[] SB3 = { 0x00, 0x00, 0x02, 0x08, 0x08, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x08, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x02, 0x02, 0x08, 0x08, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0x08, 0x02, 0x02, 0x08, 0x00, 0x02, 0x00, 0x08, 0x08, 0x02, 0x00, 0x00,
				0x00, 0x00, 0x02, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x02, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x08, 0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x08, 0x00, 0x02, 0x02, 0x08,
				0x08, 0x00, 0x02, 0x08, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x08, 0x00, 0x02, 0x08, 0x00, 0x00, 0x00, 0x08, 0x08, 0x02, 0x02, 0x08, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x02, 0x02, 0x00,
				0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x02, 0x08, 0x00, 0x02, 0x00, 0x00, 0x08, 0x02, 0x02, 0x00, 0x08, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x08,
				0x08, 0x02, 0x02, 0x08, 0x08, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x08, 0x08, 0x00, 0x02, 0x08, 0x00, 0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
				0x08, 0x02, 0x02, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 0x02, 0x08, 0x00, 0x02, 0x02, 0x00, 0x08, 0x00, 0x00, 0x08, 0x08, 0x02, 0x00, 0x00, 0x08, 0x00, 0x02, 0x08, 0x00, 0x00, 0x02, 0x08, 0x08, 0x02, 0x00, 0x00,
				0x00, 0x02, 0x02, 0x08, 0x00, 0x00, 0x00, 0x08, 0x08, 0x02, 0x00, 0x08, 0x00, 0x02, 0x02, 0x00 };
		return SB3;
	}

	private static byte[] getSB4() {
		byte[] SB4 = { 0x00, (byte) 0x80, 0x20, 0x01, 0x00, 0x00, 0x20, (byte) 0x81, 0x00, 0x00, 0x20, (byte) 0x81, 0x00, 0x00, 0x00, (byte) 0x80, 0x00, (byte) 0x80, 0x20, (byte) 0x80, 0x00, (byte) 0x80, 0x00, (byte) 0x81,
				0x00, (byte) 0x80, 0x00, 0x01, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x80, 0x20, 0x00, 0x00, (byte) 0x80, 0x20, 0x00, 0x00, (byte) 0x80, 0x20, (byte) 0x81, 0x00, 0x00, 0x00, (byte) 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x80, 0x00, (byte) 0x80,
				0x00, (byte) 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00, 0x00, (byte) 0x80, 0x00, 0x00, 0x00, (byte) 0x80, 0x20, 0x01, 0x00, 0x00, 0x00, (byte) 0x80, 0x00, (byte) 0x80, 0x00, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x20, (byte) 0x80,
				0x00, (byte) 0x80, 0x00, (byte) 0x81, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, (byte) 0x80, 0x00, (byte) 0x80, 0x00, (byte) 0x80, 0x00, 0x00, 0x20, 0x00, 0x00, (byte) 0x80, 0x20, (byte) 0x80, 0x00, (byte) 0x80, 0x20, (byte) 0x81, 0x00, 0x00, 0x00, (byte) 0x81, 0x00, (byte) 0x80, 0x00, (byte) 0x80,
				0x00, (byte) 0x80, 0x00, 0x01, 0x00, (byte) 0x80, 0x20, 0x00, 0x00, (byte) 0x80, 0x20, (byte) 0x81, 0x00, 0x00, 0x00, (byte) 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x80, 0x20, 0x00, 0x00, 0x00, 0x20, (byte) 0x80, 0x00, (byte) 0x80, 0x00, (byte) 0x80,
				0x00, (byte) 0x80, 0x00, (byte) 0x81, 0x00, 0x00, 0x00, 0x01, 0x00, (byte) 0x80, 0x20, 0x01, 0x00, 0x00, 0x20, (byte) 0x81, 0x00, 0x00, 0x20, (byte) 0x81, 0x00, 0x00, 0x00, (byte) 0x80, 0x00, (byte) 0x80, 0x20, (byte) 0x81, 0x00, 0x00, 0x00, (byte) 0x81, 0x00, 0x00, 0x00, 0x01,
				0x00, 0x00, 0x20, 0x00, 0x00, (byte) 0x80, 0x00, 0x01, 0x00, 0x00, 0x20, 0x01, 0x00, (byte) 0x80, 0x20, (byte) 0x80, 0x00, (byte) 0x80, 0x00, (byte) 0x81, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x20, (byte) 0x80, 0x00, (byte) 0x80, 0x00, 0x00, 0x00, (byte) 0x80, 0x20, 0x01,
				0x00, 0x00, 0x00, (byte) 0x80, 0x00, (byte) 0x80, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, (byte) 0x80, 0x20, (byte) 0x80 };
		return SB4;
	}

	private static byte[] getSB5() {
		byte[] SB5 = { 0x00, 0x00, 0x01, 0x00, 0x02, 0x08, 0x01, 0x00, 0x02, 0x08, 0x00, 0x00, 0x42, 0x00, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
				0x40, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x40, 0x08, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x40, 0x08, 0x01, 0x00, 0x42, 0x00, 0x01, 0x00, 0x42, 0x08, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00,
				0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x01, 0x00, 0x42, 0x08, 0x01, 0x00, 0x42, 0x08, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00,
				0x42, 0x08, 0x00, 0x00, 0x40, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x02, 0x08, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00,
				0x42, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x42, 0x00, 0x01, 0x00, 0x40, 0x08, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00,
				0x42, 0x08, 0x00, 0x00, 0x02, 0x08, 0x01, 0x00, 0x40, 0x08, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x42, 0x08, 0x00, 0x00, 0x42, 0x08, 0x01, 0x00, 0x00, 0x08, 0x01, 0x00, 0x42, 0x00, 0x00, 0x00,
				0x42, 0x08, 0x01, 0x00, 0x02, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00, 0x40, 0x00, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x40, 0x08, 0x00, 0x00, 0x02, 0x08, 0x01, 0x00, 0x40, 0x00, 0x01, 0x00 };
		return SB5;
	}

	private static byte[] getSB6() {
		byte[] SB6 = { 0x20, 0x00, 0x00, 0x10, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x20, 0x40, 0x40, 0x10, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10,
				0x20, 0x40, 0x40, 0x10, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x10, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x00, 0x10, 0x00, 0x40, 0x00, 0x10, 0x20, 0x00, 0x40, 0x00, 0x20, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x10, 0x20, 0x00, 0x40, 0x10, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x20, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x10, 0x20, 0x40, 0x00, 0x10,
				0x20, 0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x10, 0x20, 0x40, 0x40, 0x00, 0x00, 0x00, 0x40, 0x10, 0x00, 0x40, 0x40, 0x00, 0x20, 0x40, 0x40, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x40, 0x00,
				0x00, 0x00, 0x00, 0x10, 0x20, 0x40, 0x00, 0x10, 0x00, 0x40, 0x40, 0x00, 0x20, 0x40, 0x40, 0x10, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0x20, 0x00, 0x00, 0x10, 0x00, 0x40, 0x00, 0x00, 0x20, 0x00, 0x40, 0x00,
				0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0x20, 0x00, 0x00, 0x10, 0x20, 0x40, 0x40, 0x10, 0x00, 0x40, 0x40, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x10, 0x20, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x20, 0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x40, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x40, 0x40, 0x10, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x00, 0x10, 0x20, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00,
				0x20, 0x40, 0x40, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x10, 0x20, 0x00, 0x40, 0x10 };
		return SB6;
	}

	private static byte[] getSB7() {
		byte[] SB7 = { 0x00, 0x20, 0x00, 0x00, 0x04, 0x20, 0x00, 0x02, 0x04, 0x00, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x08, 0x02,
				0x00, 0x20, 0x08, 0x02, 0x04, 0x20, 0x08, 0x00, 0x04, 0x20, 0x08, 0x02, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00, 0x02,
				0x00, 0x00, 0x08, 0x02, 0x04, 0x00, 0x08, 0x00, 0x00, 0x20, 0x08, 0x02, 0x00, 0x20, 0x00, 0x02, 0x04, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x02, 0x04, 0x20, 0x00, 0x00, 0x04, 0x20, 0x08, 0x00, 0x00, 0x20, 0x00, 0x02,
				0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x02, 0x04, 0x20, 0x08, 0x02, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00,
				0x00, 0x20, 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x00, 0x08, 0x02, 0x04, 0x00, 0x08, 0x02, 0x04, 0x20, 0x00, 0x02, 0x04, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x20, 0x00, 0x02, 0x04, 0x00, 0x00, 0x00,
				0x04, 0x00, 0x08, 0x00, 0x00, 0x20, 0x00, 0x00, 0x04, 0x20, 0x08, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x20, 0x08, 0x02, 0x04, 0x20, 0x08, 0x00, 0x00, 0x00, 0x08, 0x02, 0x04, 0x00, 0x00, 0x02, 0x04, 0x20, 0x08, 0x02,
				0x04, 0x20, 0x00, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x04, 0x20, 0x08, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x08, 0x02, 0x04, 0x20, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
				0x04, 0x00, 0x00, 0x02, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x20, 0x00, 0x02 };
		return SB7;
	}

	private static byte[] getSB8() {
		byte[] SB8 = { 0x10, 0x00, 0x10, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x04, 0x00, 0x00, 0x10, 0x04, 0x10, 0x40, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x40,
				0x00, 0x00, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0x10, 0x04, 0x00, 0x00, 0x10, 0x04, 0x10, 0x40, 0x00, 0x04, 0x10, 0x00, 0x10, 0x04, 0x10, 0x00, 0x00, 0x04, 0x10, 0x40, 0x00, 0x00, 0x10, 0x00,
				0x00, 0x00, 0x00, 0x40, 0x10, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 0x40, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x04, 0x10, 0x00, 0x00, 0x04, 0x00, 0x40, 0x10, 0x04, 0x00, 0x40, 0x10, 0x04, 0x10, 0x00,
				0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 0x40, 0x10, 0x00, 0x00, 0x40, 0x10, 0x00, 0x10, 0x00, 0x00, 0x04, 0x10, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x10, 0x40,
				0x00, 0x04, 0x00, 0x00, 0x10, 0x04, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40, 0x10, 0x04, 0x00, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x04, 0x10, 0x40, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x40,
				0x10, 0x00, 0x00, 0x40, 0x10, 0x04, 0x00, 0x00, 0x10, 0x04, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x10, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x10, 0x40, 0x00, 0x04, 0x00, 0x40,
				0x10, 0x00, 0x00, 0x40, 0x10, 0x04, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x10, 0x04, 0x10, 0x40, 0x00, 0x04, 0x10, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x10, 0x40,
				0x00, 0x00, 0x10, 0x40, 0x00, 0x04, 0x00, 0x40, 0x10, 0x00, 0x00, 0x00, 0x10, 0x04, 0x10, 0x00 };
		return SB8;
	}
}